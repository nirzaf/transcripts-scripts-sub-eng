1
00:00:00,990 --> 00:00:01,800
Welcome back.

2
00:00:01,830 --> 00:00:10,890
So nowhere on the point of creating our repositories and what we'll be implementing is a development

3
00:00:10,890 --> 00:00:11,880
pattern, really.

4
00:00:12,410 --> 00:00:19,170
So let me just give some background as to why we need to go through that when we're doing our work with

5
00:00:19,170 --> 00:00:20,070
our API.

6
00:00:20,130 --> 00:00:25,850
It's easy enough to just write the queries using entity, framework or and link, and we just write

7
00:00:25,930 --> 00:00:27,030
it especially like balloon.

8
00:00:27,030 --> 00:00:30,330
They have two tables contending with which our country and.

9
00:00:31,140 --> 00:00:35,010
But what happens when we have eight, nine, 10, 20 tables?

10
00:00:35,400 --> 00:00:41,340
It becomes kind of tedious to try and write queries every time we have a table.

11
00:00:41,340 --> 00:00:43,350
And then that's going to lead to a repetition.

12
00:00:43,620 --> 00:00:50,020
And then if we have the same query, multiple places, then that's a maintenance nightmare.

13
00:00:50,250 --> 00:00:56,430
So that's why we're going to be implementing a pattern and we'll be using the generic repository pattern

14
00:00:56,730 --> 00:01:06,120
alongside the units of work pattern to kind of create a container to define basic functionality that

15
00:01:06,120 --> 00:01:12,340
will be shared across all our tables and all our database operations in our project.

16
00:01:13,230 --> 00:01:16,230
So to get this started, I'm going to create two new folders.

17
00:01:16,230 --> 00:01:22,500
One will be called I am a Repository, and the other one will be called the repository.

18
00:01:22,510 --> 00:01:22,760
Right.

19
00:01:22,820 --> 00:01:25,890
So we have a repository.

20
00:01:27,080 --> 00:01:29,810
And that's going to be a capital I.

21
00:01:31,190 --> 00:01:35,830
And then we're going to have another one that's I'm just going to call repository.

22
00:01:36,230 --> 00:01:40,100
So there's a concept called separation of.

23
00:01:41,750 --> 00:01:48,770
Concerns where you want to make sure that your every file knows that it is doing one thing.

24
00:01:48,780 --> 00:01:52,580
So that's why we made sure to define two different files for this.

25
00:01:52,730 --> 00:01:58,220
We want to define some amount of individual classes along the way, but they want to make sure that

26
00:01:58,220 --> 00:02:01,610
certain things are generic and we're not repeating certain things right.

27
00:02:02,120 --> 00:02:11,060
So in our eye repository, we're going to create an interface somewhat to create a class because that's

28
00:02:11,060 --> 00:02:11,630
just quick.

29
00:02:12,140 --> 00:02:20,310
But I'm going to call it a generic repository and go ahead and click on ADD and I'm just going to change

30
00:02:20,510 --> 00:02:21,290
its interface.

31
00:02:21,290 --> 00:02:26,960
If you choose interface, that will be fine doing the things that you have to remember to put on public.

32
00:02:27,140 --> 00:02:27,570
Right.

33
00:02:27,590 --> 00:02:33,050
So that's the only reason I really choose class because of the forgotten to put on public in the past.

34
00:02:33,320 --> 00:02:36,830
And I couldn't understand why I was getting the air I was getting.

35
00:02:37,250 --> 00:02:41,570
So that's my little failsafe based on my experience.

36
00:02:41,600 --> 00:02:50,630
So what we're going to do is make this generic repository take a generic parameter in the form of T

37
00:02:51,020 --> 00:02:55,000
where T is going to be class.

38
00:02:55,490 --> 00:02:55,970
All right.

39
00:02:56,840 --> 00:02:58,550
So I want to talk about generics.

40
00:02:58,850 --> 00:03:07,130
This t just says, well, I'm prepared to take any type of class that you send my way, and that helps

41
00:03:07,130 --> 00:03:15,300
us in creating those base operations for different situations with different class types.

42
00:03:16,130 --> 00:03:23,180
So the first one that we're going to create is a function called get SA will get.

43
00:03:23,180 --> 00:03:25,000
All right.

44
00:03:25,310 --> 00:03:26,800
So I'm going to see.

45
00:03:27,870 --> 00:03:35,730
Task, a list of type to get, all right, and then I'm going to be defining certain things, so let

46
00:03:35,730 --> 00:03:44,880
me just explain exactly what is going on in this function Whitter task, what we're dealing with asynchronous

47
00:03:44,880 --> 00:03:45,600
programming.

48
00:03:45,600 --> 00:03:46,830
We have to use tasks.

49
00:03:46,830 --> 00:03:52,140
If you're getting an arrow, it's because you don't have that library that I've highlighted there,

50
00:03:52,380 --> 00:03:57,960
at which point, you know, you just do control DOT and go ahead and into the using statements.

51
00:03:58,440 --> 00:04:07,770
So the task list of type T once again, generic and the function name is gets all so gets all has a

52
00:04:07,770 --> 00:04:14,400
parameter which for which I'm going to include the missing reference which is of type, expression,

53
00:04:14,400 --> 00:04:16,830
function and expression.

54
00:04:16,830 --> 00:04:19,020
And we're making an optional parameter.

55
00:04:20,200 --> 00:04:22,810
It's also going to take on a horrible.

56
00:04:23,850 --> 00:04:27,830
I aquaria, all of that I ordered horrible.

57
00:04:28,890 --> 00:04:34,610
So you can just rewrite that how I have it and order by that's also optional.

58
00:04:34,740 --> 00:04:38,970
And then we have the ability to include if we need to.

59
00:04:39,780 --> 00:04:40,350
All right.

60
00:04:40,860 --> 00:04:46,410
Then I'm going to have a follow up function for git.

61
00:04:47,190 --> 00:04:49,770
So task t get.

62
00:04:49,890 --> 00:04:53,940
So this one is going to get at least this one is just getting one.

63
00:04:54,570 --> 00:04:57,150
So that's why it's task T and this one is Toschi.

64
00:04:57,960 --> 00:05:06,030
So this one is just going to get one record and is seeking the same expression parameter and it's going

65
00:05:06,030 --> 00:05:10,890
to have the inputs on where fishing out the the actual function.

66
00:05:10,920 --> 00:05:14,610
Then you'll understand what the parameters really stand for.

67
00:05:15,270 --> 00:05:22,670
We're going to have similar functions for our current operations.

68
00:05:23,460 --> 00:05:28,490
So I'm going to have to ask insert T entity.

69
00:05:28,500 --> 00:05:31,020
So this is going to be the one to create.

70
00:05:31,440 --> 00:05:33,200
We're going to have insert range.

71
00:05:33,210 --> 00:05:38,850
So I like to keep this one nearby because sometimes they have both operations and instead of calling

72
00:05:38,850 --> 00:05:43,670
this multiple times, you could just define one that takes that list and it just does the rest.

73
00:05:43,680 --> 00:05:48,720
Anyway, we have delete and they also need to rearrange.

74
00:05:49,560 --> 00:05:50,220
All right.

75
00:05:50,370 --> 00:05:51,630
And update.

76
00:05:51,630 --> 00:05:55,940
I don't like doing the etranger, but we have the update.

77
00:05:55,950 --> 00:06:04,110
So notice that the task, the delete is task for all of these are task, but these two are void operations.

78
00:06:04,560 --> 00:06:04,930
All right.

79
00:06:05,190 --> 00:06:07,990
So that is it for our generic repository.

80
00:06:08,010 --> 00:06:13,980
So once again, this is being defined as like a base, Getchell, no matter what the data type, if

81
00:06:13,980 --> 00:06:21,060
we introduce five more tables and an accompanying domain classes, we don't really have to change much

82
00:06:21,060 --> 00:06:28,270
here because these functions will be defined to handle any other table or domain class that gets through.

83
00:06:28,740 --> 00:06:32,890
So now that we have the interface, I'm going to go ahead and create the concrete.

84
00:06:33,120 --> 00:06:36,870
So I'm going to go with the repository and class.

85
00:06:36,870 --> 00:06:42,480
And this time is an actual class and I'm calling it generic repositories of a generic repository.

86
00:06:42,720 --> 00:06:48,720
And I have just generic repository and generic repository is going to take the same.

87
00:06:49,860 --> 00:06:51,400
Generic T.

88
00:06:51,600 --> 00:06:58,390
But it's also going to inherit from a generic repository where T is across.

89
00:06:58,550 --> 00:07:02,580
I'm just going to go ahead and include the missing reference right there.

90
00:07:02,940 --> 00:07:08,460
And then it's going to complain because once we're inheriting, we have to make sure we implement.

91
00:07:08,490 --> 00:07:15,330
So I'm just going to go ahead and implement the interface and then it generates all of those MyFord

92
00:07:15,330 --> 00:07:16,830
stubs for me.

93
00:07:16,860 --> 00:07:17,870
Also kindly.

94
00:07:18,480 --> 00:07:23,300
So let us flesh out exactly what we need here.

95
00:07:23,730 --> 00:07:27,180
So we're going to have to do some modes of dependency injection.

96
00:07:27,190 --> 00:07:35,460
So I've mentioned that if I have before, I haven't mentioned it much more dependency injection is basically

97
00:07:35,670 --> 00:07:41,730
the concept by which whatever we load it up in the startup is no available application wide.

98
00:07:41,730 --> 00:07:46,580
So we don't need to instantiate every time that we need it.

99
00:07:46,590 --> 00:07:55,360
All we do is make reference to the already existing object because it was defined in our startup.

100
00:07:55,380 --> 00:07:55,750
Right.

101
00:07:55,980 --> 00:08:02,660
So more contextually or connection our bridge to the database, we can know.

102
00:08:02,880 --> 00:08:06,720
Just get a copy of that to use in our file here.

103
00:08:06,720 --> 00:08:13,710
Instead of trying to create a whole new bridge, our own instance of this bridge, we can just leverage

104
00:08:13,710 --> 00:08:20,910
the one that exists as a result of it being included in the startup procedure.

105
00:08:21,060 --> 00:08:21,450
All right.

106
00:08:21,690 --> 00:08:27,060
That's that's in a nutshell what dependency injection really helps us to do.

107
00:08:27,660 --> 00:08:33,750
So what we're going to do is define a private read only it's private.

108
00:08:33,840 --> 00:08:37,020
It's read only because we don't need to make any modifications to it.

109
00:08:37,350 --> 00:08:44,280
And it's going to be an instance of data base context.

110
00:08:45,560 --> 00:08:48,500
All right, including the missing references.

111
00:08:48,530 --> 00:08:49,230
There we go.

112
00:08:50,070 --> 00:08:51,030
Private Read-Only.

113
00:08:51,260 --> 00:08:54,410
And I'm just going to call it underscore context.

114
00:08:55,880 --> 00:08:56,410
Right.

115
00:08:57,050 --> 00:09:02,930
And then similarly, I'll just duplicate this line because I want the president to read only I want

116
00:09:02,930 --> 00:09:10,430
DBI sit and remember, DBE said, coming over from the same database context and it's going to be defined

117
00:09:10,430 --> 00:09:11,990
for a generic.

118
00:09:11,990 --> 00:09:14,360
So I'll just go ahead and include the missing reference.

119
00:09:14,370 --> 00:09:18,890
There are also the basics of typed and I'm going to call this one.

120
00:09:20,210 --> 00:09:24,770
No, these are defined for this class.

121
00:09:24,770 --> 00:09:34,280
However, dependency injection will require me to create a constructor and it's going to take a parameter

122
00:09:34,310 --> 00:09:38,450
of type database context and I'm going to change the name.

123
00:09:38,460 --> 00:09:41,440
So the private one has underscored this one does not.

124
00:09:41,810 --> 00:09:51,350
And then having taken that parameter, it is no able it's not accessing the one or the copy from the

125
00:09:51,350 --> 00:09:52,340
start of procedure.

126
00:09:52,640 --> 00:10:00,410
So for my local use, I'm going to initialize my current context that I have as my private read, only

127
00:10:00,770 --> 00:10:04,610
to be the same value as the one being injected in.

128
00:10:04,640 --> 00:10:07,460
So that's pretty much dependency injection.

129
00:10:07,640 --> 00:10:09,200
Yes, that was a mystery to your point.

130
00:10:09,200 --> 00:10:12,350
You know, that is how it basically works.

131
00:10:12,740 --> 00:10:18,440
There are other nuances to it, but for now, it doesn't need to get much more complicated than that.

132
00:10:18,980 --> 00:10:21,110
So the next one is on the score.

133
00:10:21,110 --> 00:10:23,270
DB is going to be equal to context.

134
00:10:23,270 --> 00:10:23,730
Not at all.

135
00:10:23,750 --> 00:10:24,710
Initialize plaintext.

136
00:10:24,740 --> 00:10:29,510
I can see in context, give me a set of whatever it is.

137
00:10:29,960 --> 00:10:36,890
And remember that at this point he needs to basically correspond with something that has been outlined

138
00:10:36,890 --> 00:10:41,240
in our DB set in our database context.

139
00:10:41,360 --> 00:10:41,770
All right.

140
00:10:42,350 --> 00:10:48,440
So that is why I can confidently say go to the context file and give me a set of whatever this is,

141
00:10:48,440 --> 00:10:53,820
because the context should know about it by the time we're building this repository.

142
00:10:54,650 --> 00:10:59,680
So now that we have that part done, lets us go on to our implementation.

143
00:10:59,690 --> 00:11:03,980
So let's do the delete, which is fairly easy.

144
00:11:04,340 --> 00:11:09,870
All I want to say is var entity is equal to and then I'll wait.

145
00:11:09,890 --> 00:11:13,440
So because you're doing asynchronous programming, you have to wait.

146
00:11:13,790 --> 00:11:15,190
So I have to ask here.

147
00:11:15,200 --> 00:11:19,510
But what I'm missing is the async keyword before it.

148
00:11:20,000 --> 00:11:20,270
Right.

149
00:11:20,360 --> 00:11:23,300
Anytime you have a task that you're going to be using it.

150
00:11:23,570 --> 00:11:25,820
You have to have async notice.

151
00:11:25,820 --> 00:11:28,390
When you click one, the other one gets highlighted.

152
00:11:28,400 --> 00:11:29,540
They go hand in hand.

153
00:11:29,980 --> 00:11:30,270
Right.

154
00:11:31,220 --> 00:11:39,020
So we say I wait on the score DB dot find and I'm just going to find it.

155
00:11:39,530 --> 00:11:40,520
Find async.

156
00:11:40,520 --> 00:11:42,160
So Natcore sorry.

157
00:11:42,170 --> 00:11:47,850
In entity framework or for almost every operation you have a corresponding async operation.

158
00:11:47,870 --> 00:11:51,160
So at this point it's there, use it.

159
00:11:51,170 --> 00:11:54,560
And if you're using async you have to precede it with it.

160
00:11:54,740 --> 00:12:03,570
And by extension the method in which this awaits keyword is being used to have async on the method.

161
00:12:03,980 --> 00:12:09,440
So it's not in the interface, it's not in the interface, but in the definition.

162
00:12:09,440 --> 00:12:13,960
You have to have that as you write more and more, you'll get the hang of it.

163
00:12:14,600 --> 00:12:21,530
So we'll find async and we'll pass in the idea for the report that you want to find.

164
00:12:21,860 --> 00:12:25,130
And then we'll say DB dot remove.

165
00:12:26,750 --> 00:12:34,790
And we're moving the entity that has been found with that, and that's it for delete now delete range

166
00:12:35,090 --> 00:12:37,360
is pretty much one line.

167
00:12:37,370 --> 00:12:41,260
It's just going to be DBI that remove range.

168
00:12:41,630 --> 00:12:43,840
So we have a list of entities.

169
00:12:44,160 --> 00:12:52,760
So I'm going to say DB dot, remove range and remove variances will give me the list of entities where

170
00:12:52,940 --> 00:12:54,200
there is a list of entities.

171
00:12:54,200 --> 00:12:55,070
Just remove them.

172
00:12:55,970 --> 00:12:58,250
That's it for the remove range.

173
00:12:58,700 --> 00:13:04,150
So I'm going to go ahead and kind of go through the easier ones.

174
00:13:04,160 --> 00:13:10,970
So insert is easy, insert Reges easy and open, it is easy and then we'll go back to the get and get.

175
00:13:10,970 --> 00:13:13,690
All those can get a bit more complicated.

176
00:13:14,090 --> 00:13:21,320
So I'm just going to prepend each task in the method header with the keyword async.

177
00:13:21,320 --> 00:13:22,130
That one is void.

178
00:13:22,130 --> 00:13:28,580
So I don't need you there just to make sure that I don't run into any difficulties later on.

179
00:13:29,570 --> 00:13:29,990
All right.

180
00:13:30,350 --> 00:13:33,090
So far, insert that one is fairly simple.

181
00:13:33,090 --> 00:13:40,400
All we're going to see is a wait db dot add async and we add the entity.

182
00:13:40,820 --> 00:13:43,250
Whatever Kimura's data, add it.

183
00:13:43,760 --> 00:13:45,020
That's all we need to do.

184
00:13:45,110 --> 00:13:45,500
Right.

185
00:13:45,890 --> 00:13:54,380
And then similarly for the insert range we're going to do is db dot outrange async.

186
00:13:54,380 --> 00:13:59,030
So this one has an async notice or move range did not have an async.

187
00:13:59,630 --> 00:14:00,080
Right.

188
00:14:00,110 --> 00:14:04,760
So outrange async and the list of entities that you got to add.

189
00:14:05,300 --> 00:14:10,170
And then for our update we have a two part operation.

190
00:14:10,190 --> 00:14:15,080
One, I'm going to attach the entity to the DB.

191
00:14:15,080 --> 00:14:22,610
So in other words, when the data comes over, it might not be attached or it might be an object that

192
00:14:22,610 --> 00:14:27,500
exists in memory with no direct connection to the database at that point in time.

193
00:14:27,500 --> 00:14:32,660
So attach means pay attention to this and check if you have it already.

194
00:14:32,660 --> 00:14:39,050
Check if there's any difference between it and what you have in the database, because, I mean, we're

195
00:14:39,050 --> 00:14:40,520
able to do an update, right?

196
00:14:40,700 --> 00:14:46,120
So then it starts tracking to see that, OK, there are certain fields that are different.

197
00:14:46,130 --> 00:14:51,320
So these are two different, let's say, records.

198
00:14:51,320 --> 00:14:51,620
Right.

199
00:14:51,920 --> 00:14:55,370
And then the next line would say context, that entry.

200
00:14:55,910 --> 00:14:58,340
And then we reference entity.

201
00:14:58,490 --> 00:15:01,100
That state is required to modify it.

202
00:15:01,100 --> 00:15:07,130
So once we tell it that, OK, it has been modified, then it will know that, OK, I need to do an

203
00:15:07,130 --> 00:15:08,050
update to it.

204
00:15:09,020 --> 00:15:13,340
So let's go up to our get.

205
00:15:14,240 --> 00:15:17,240
So get is actually easier to do then get to all.

206
00:15:17,240 --> 00:15:20,330
But once you do get then get all will make a bit more sense.

207
00:15:20,900 --> 00:15:27,050
So the first thing that I'm going to do is get an equitable.

208
00:15:28,230 --> 00:15:36,120
I want to call it Quarrie of what's in the sermon ladyboys already defined to be whatever it is Datatel

209
00:15:36,390 --> 00:15:37,680
that we're dealing with, right.

210
00:15:38,130 --> 00:15:45,660
So just get all of the records basically that are in that table.

211
00:15:45,750 --> 00:15:47,690
Pretty much that's what this is going to do.

212
00:15:48,240 --> 00:15:52,620
And then I went to check to see if there was an includes.

213
00:15:53,910 --> 00:16:04,260
Right, it was there and includes a requirement, meaning did the user did the calling code, whoever

214
00:16:04,260 --> 00:16:08,210
called this method, would they like to include additional details?

215
00:16:08,310 --> 00:16:14,940
I did say earlier that when it comes to the hotel on the country, instead of looking for the hotel

216
00:16:14,940 --> 00:16:20,130
and then getting the contra idea and then calling the database again to get the country with that idea,

217
00:16:20,310 --> 00:16:26,610
and then that's to database, because you could make one database call and we're getting the hotel and

218
00:16:26,610 --> 00:16:35,070
including the country so that it will automatically fill this property with all the corresponding countries

219
00:16:35,070 --> 00:16:35,820
details.

220
00:16:36,210 --> 00:16:36,530
Right.

221
00:16:36,570 --> 00:16:38,790
So that's what that includes is for.

222
00:16:39,090 --> 00:16:44,850
So this code snippet basically says that if it includes is not equal to no.

223
00:16:44,880 --> 00:16:48,100
So by default, it's not it's optional.

224
00:16:48,120 --> 00:16:49,490
You don't have to put a value.

225
00:16:49,830 --> 00:16:58,200
If, however, you choose to put a value, if it is not equal to null, then for each property in includes

226
00:16:58,830 --> 00:17:04,660
I want to include to the query whatever property was asked for.

227
00:17:05,340 --> 00:17:07,110
So this is the country then.

228
00:17:07,110 --> 00:17:08,940
This group is going to run once.

229
00:17:09,240 --> 00:17:14,610
If you have five foreign keys and you put all five of them in, that includes this, then this is going

230
00:17:14,610 --> 00:17:17,760
to run five times, including each one.

231
00:17:18,360 --> 00:17:18,870
Pretty much.

232
00:17:18,880 --> 00:17:19,920
That's all I was going to do.

233
00:17:21,020 --> 00:17:25,220
All right, so it's completely optional because there might be times when they need to include and there

234
00:17:25,220 --> 00:17:31,020
are times when they don't need to for speed purposes, you don't want to intrude all the time for one

235
00:17:31,040 --> 00:17:34,310
query, for one bit of information when you didn't have to.

236
00:17:34,700 --> 00:17:43,850
So this helps us to keep the application kind of quicker than it would normally be if it included everything

237
00:17:43,850 --> 00:17:44,340
all the time.

238
00:17:44,870 --> 00:17:54,970
Then the next thing we want to do is return our wet query dot and then I'm going to say as no tracking.

239
00:17:54,980 --> 00:18:01,760
So that's where that tracking thing comes in, because any record that is retrieved here is not being

240
00:18:01,760 --> 00:18:02,270
tracked.

241
00:18:02,750 --> 00:18:05,450
A copy is taken and it's sent into memory.

242
00:18:05,630 --> 00:18:10,220
Syntel to the client, the database and into different words don't really care about it.

243
00:18:10,230 --> 00:18:11,960
So that's why I don't hear.

244
00:18:11,960 --> 00:18:13,160
We see I touch it.

245
00:18:13,160 --> 00:18:18,530
So we get that record which wasn't being tracked or being looked at.

246
00:18:18,710 --> 00:18:23,660
And then we say start looking at it and just note that it has been modified.

247
00:18:23,660 --> 00:18:26,360
By the time it reaches here, it has been modified.

248
00:18:26,990 --> 00:18:29,300
So we get Asmal tracking.

249
00:18:29,840 --> 00:18:38,540
But then after that, what I really want to do is get the first our default record and there's a first

250
00:18:38,690 --> 00:18:39,890
default async.

251
00:18:39,890 --> 00:18:40,610
There we go.

252
00:18:41,420 --> 00:18:43,760
And then I can see the expression.

253
00:18:45,020 --> 00:18:52,070
So let me explain what the expression is, the expression is defined as expression, function t Boulin,

254
00:18:52,340 --> 00:18:54,170
and that's the name of the parameter.

255
00:18:54,170 --> 00:18:59,540
So this data that basically allows us to put in a lambda expression because then a lambda expression

256
00:18:59,540 --> 00:19:08,480
would allow us to see something like Q and then the lambda arrow and then would say, query dot something

257
00:19:08,480 --> 00:19:09,770
is equal to something else.

258
00:19:09,770 --> 00:19:11,450
So that's why I said bool right.

259
00:19:11,660 --> 00:19:13,010
Whatever condition.

260
00:19:13,400 --> 00:19:17,840
So when we want to retrieve the one record, what is the condition that we want to use to retrieve the

261
00:19:17,840 --> 00:19:19,720
one recorded by idea.

262
00:19:20,030 --> 00:19:21,300
Is it by name.

263
00:19:21,560 --> 00:19:27,350
So this allows it to be very generic and flexible because then we can write our different expressions

264
00:19:27,680 --> 00:19:32,450
based on the context, but calling one method at any given time.

265
00:19:33,020 --> 00:19:33,380
All right.

266
00:19:33,650 --> 00:19:36,100
So that's it for the next four to get.

267
00:19:36,110 --> 00:19:36,640
Sorry.

268
00:19:37,040 --> 00:19:47,240
So the next one that we have to do is the get all right and get all is going to have all of that code

269
00:19:47,240 --> 00:19:49,140
with some tweaks along the way.

270
00:19:49,160 --> 00:19:54,440
So firstly, we're not going to be looking at any first our default.

271
00:19:54,440 --> 00:19:56,630
So then we just modify this airline.

272
00:19:57,260 --> 00:20:04,480
We get the query that as tracking and then I'm just going to make it go to the list is Sync.

273
00:20:06,460 --> 00:20:08,710
All right, so that's why we have that.

274
00:20:09,250 --> 00:20:12,020
Ones zero calling on asynchronous function.

275
00:20:12,040 --> 00:20:14,080
You have to precede it with our.

276
00:20:14,560 --> 00:20:15,000
All right.

277
00:20:15,730 --> 00:20:22,230
So we're turning our list so we Biasutto list as opposed to this one where we just got the first our

278
00:20:22,240 --> 00:20:22,880
default.

279
00:20:23,500 --> 00:20:30,730
No, we have the same parameter for the includes, but we have another one for autobio.

280
00:20:31,030 --> 00:20:36,670
So I'm going to put another little snippet right after.

281
00:20:36,700 --> 00:20:39,610
Well, actually, I'm going to put two snippets in.

282
00:20:39,610 --> 00:20:41,320
So firstly, we've got the query.

283
00:20:42,040 --> 00:20:47,250
Then I'm going to check if there was an expression somewhere to filter the query first before I even

284
00:20:47,260 --> 00:20:53,230
look at it includes someone to say if the expression is not equal to because we could be looking for

285
00:20:53,230 --> 00:20:59,140
a list of records, but we want to see where the country is.

286
00:20:59,140 --> 00:21:00,690
One on the sun.

287
00:21:00,880 --> 00:21:08,710
Give me the list of hotels from Jamaica so we could put in the expression to see where whatever condition

288
00:21:08,710 --> 00:21:10,770
is needed to specify from Jamaica.

289
00:21:11,110 --> 00:21:19,030
And then if it is not, even if it is not equal to null meaning our condition is there, then filter

290
00:21:19,060 --> 00:21:20,540
the query for me, please.

291
00:21:20,560 --> 00:21:28,260
So query is equal to the initial query, which was all records dot where that expression is true.

292
00:21:28,870 --> 00:21:34,320
Then after you've done that, because we could have had five hundred and know the filter, brought it

293
00:21:34,330 --> 00:21:38,350
on to twenty, then you go ahead and put on the includes.

294
00:21:39,250 --> 00:21:39,730
All right.

295
00:21:40,010 --> 00:21:47,950
And then finally after you put on the interludes and everything, I would like you to order if necessary.

296
00:21:47,960 --> 00:21:53,890
So if the person passed in that order by Oh I want it in descending, ascending or this or that, you

297
00:21:53,890 --> 00:21:59,830
just see if it if the command came in, then queries equal to order by query.

298
00:22:00,340 --> 00:22:00,630
All right.

299
00:22:00,640 --> 00:22:03,900
So that's really all there is still to get and get all.

300
00:22:05,680 --> 00:22:08,980
So we've gotten the majority of the work out of the way.

301
00:22:09,250 --> 00:22:14,430
We have about two more steps to go and then we are done with this task.

302
00:22:14,860 --> 00:22:18,270
So the next thing that we want to do is create that.

303
00:22:18,730 --> 00:22:21,460
Well, I'm going to call it unit of work, right?

304
00:22:21,470 --> 00:22:26,680
So we have the generic capacitor and we're going to give it the units of work framework on top.

305
00:22:26,680 --> 00:22:28,260
So in iReports, etc..

306
00:22:28,270 --> 00:22:32,290
I'm just going to go ahead and add what will be another interface.

307
00:22:32,290 --> 00:22:37,720
So I'm just adding it and I'm quoting it all units of work, changing this to interface.

308
00:22:39,030 --> 00:22:47,610
And this one is going to inherit from a disposable all right, and then what we're going to be defining

309
00:22:47,610 --> 00:22:55,440
in our units of work would be it's going to act like our register for every variation of the generic

310
00:22:55,440 --> 00:22:58,600
repository relative to the class T..

311
00:22:58,740 --> 00:22:59,120
Right.

312
00:22:59,490 --> 00:23:02,800
So right now, we only have two tables to cater for.

313
00:23:03,030 --> 00:23:07,830
So I'm just going to see a generic repository for country.

314
00:23:10,360 --> 00:23:11,980
Sorry for country.

315
00:23:15,000 --> 00:23:22,650
And including the missing reference and I'm just going to call it countries, so different people have

316
00:23:22,650 --> 00:23:26,320
different naming conventions here, I call it country.

317
00:23:26,350 --> 00:23:29,880
Some people would say country repository or whatever.

318
00:23:29,880 --> 00:23:36,930
I'm calling countries because when I call on needing to work, I can see this dot countries, dot whatever

319
00:23:36,930 --> 00:23:38,360
operation I want to carry on.

320
00:23:38,420 --> 00:23:38,640
Right.

321
00:23:39,060 --> 00:23:43,590
So we're going to do that also for hotels or hotel.

322
00:23:44,040 --> 00:23:46,470
And I'm calling the property hotels.

323
00:23:47,340 --> 00:23:56,040
And then we're going to have one more operation, which is our task to save.

324
00:23:58,130 --> 00:24:06,170
All right, so when we're carrying out all of these operations to add to the aid, we're making changes

325
00:24:06,170 --> 00:24:11,710
to the context, but at this point, it's just staged, right?

326
00:24:11,960 --> 00:24:17,990
So when we see save or save changes, then it will be affected.

327
00:24:18,020 --> 00:24:20,690
So that is what this is for.

328
00:24:20,700 --> 00:24:27,590
But this is outside of the repository, because if there are multiple changes to be made at that time,

329
00:24:27,590 --> 00:24:33,970
then all of them can be caught in one operation as opposed to making multiple copies of the database.

330
00:24:34,850 --> 00:24:38,660
So we have that unit of work.

331
00:24:38,670 --> 00:24:45,950
The next thing would be to create the concrete glass so the repository will add class.

332
00:24:49,740 --> 00:24:51,120
All units of work.

333
00:24:52,770 --> 00:24:58,680
And then you and it's off work is going to inherit from units of work.

334
00:24:59,660 --> 00:25:05,960
And once again, including missing references and then implement the interface.

335
00:25:06,290 --> 00:25:14,900
All right, so then what this is really just going to do is say, all right, you normal countries,

336
00:25:14,900 --> 00:25:17,860
what should I return when you call on countries from me?

337
00:25:18,200 --> 00:25:19,810
What should I call on here?

338
00:25:19,850 --> 00:25:21,320
What does disposals do?

339
00:25:21,590 --> 00:25:22,850
What does Steve do?

340
00:25:23,390 --> 00:25:25,910
Those are the things that we need to define.

341
00:25:25,940 --> 00:25:33,620
So first, I'm going to include a reference to the database context.

342
00:25:34,950 --> 00:25:35,440
Right.

343
00:25:35,550 --> 00:25:41,940
Similar to what we had before, and then I'm going to define my constructor.

344
00:25:43,990 --> 00:25:44,510
Or.

345
00:25:46,500 --> 00:25:47,770
And try that again.

346
00:25:48,220 --> 00:25:52,810
There we go, and I'm going to put in.

347
00:25:54,370 --> 00:26:02,520
The context of the story to write it out again, so I'm just going to copy the relevant parts there

348
00:26:02,790 --> 00:26:03,660
and paste.

349
00:26:03,990 --> 00:26:04,690
There we go.

350
00:26:05,130 --> 00:26:11,490
So I'm initializing the data context instead of the units of work here and the tool.

351
00:26:11,550 --> 00:26:12,520
No, that's OK.

352
00:26:12,570 --> 00:26:15,000
I have a copy of the data context also.

353
00:26:15,450 --> 00:26:19,890
So then you're probably wondering, so why do I need the data context here?

354
00:26:20,170 --> 00:26:30,450
And that is really because what we need to do is return an instance of the repository, but then we

355
00:26:30,450 --> 00:26:31,560
have to backtrack a bit.

356
00:26:31,590 --> 00:26:40,860
So I need to private the same way that we would have defined them over this side as private.

357
00:26:41,910 --> 00:26:45,410
See if I can just do this quickly.

358
00:26:45,460 --> 00:26:50,430
So I'm just going to take that and I'm going to define two private.

359
00:26:51,720 --> 00:27:01,800
Properties of the respective hotel and and countries, but I'm going to rename them, I'm going to take

360
00:27:01,800 --> 00:27:04,590
off the accessor, so this is going to be countries.

361
00:27:05,980 --> 00:27:09,000
And this one is going to be hotels.

362
00:27:09,460 --> 00:27:13,870
All right, so now that I have these private.

363
00:27:15,230 --> 00:27:24,020
Properties, I'm going to say don't here that if the private property is empty, then return a new instance

364
00:27:24,020 --> 00:27:26,420
of the generic repositories.

365
00:27:26,450 --> 00:27:29,810
I'm not going to do that, Shata, because C Sharp nine is pretty cool.

366
00:27:29,810 --> 00:27:35,480
So I can just say something like countries and then questionmark.

367
00:27:36,430 --> 00:27:38,260
Questionmark equals.

368
00:27:38,290 --> 00:27:42,320
So it's basically saying if this is null, then what should I do?

369
00:27:42,360 --> 00:27:49,810
So instead of a whole if statement right now, just see if it is null, then return an object of the

370
00:27:49,810 --> 00:27:52,900
generic repository of type country.

371
00:27:54,550 --> 00:28:01,420
And of course, based on our definition of it, you need the database context, which is why we have

372
00:28:01,420 --> 00:28:02,680
it injected here.

373
00:28:03,010 --> 00:28:05,020
So we pass in the context.

374
00:28:06,280 --> 00:28:06,730
Right.

375
00:28:06,940 --> 00:28:10,660
And then I'm basically just going to do the same thing for Hota.

376
00:28:10,670 --> 00:28:12,130
So this is like I register.

377
00:28:12,170 --> 00:28:19,240
No, this is just like a roll dice to say that all of these are potential generic repositories.

378
00:28:19,540 --> 00:28:25,690
Once you're in the network, I have access to the countries, the hotels and forever table that you

379
00:28:25,690 --> 00:28:26,320
define.

380
00:28:26,500 --> 00:28:34,630
You need to make sure that you put are you make representation for it in the eye unit of work as well

381
00:28:34,630 --> 00:28:35,920
as the unit of work.

382
00:28:36,220 --> 00:28:42,280
But all of what we just did with the generic repository in the itinerary repository, we don't have

383
00:28:42,280 --> 00:28:46,500
to redo any of that with any other data table that we meet at in the future.

384
00:28:46,870 --> 00:28:47,230
Right.

385
00:28:47,620 --> 00:28:54,490
So it's just about maintaining this list and these functions to make sure that we have access to what

386
00:28:54,490 --> 00:28:58,540
we need right here in our units of work register.

387
00:28:59,530 --> 00:29:07,330
All right, so the next thing that we need to do or well, two more things, so I want to.

388
00:29:08,520 --> 00:29:13,180
Define this pause and then we need to set up the scene and then we're done with this.

389
00:29:13,380 --> 00:29:18,630
So this pause I'm going to kind of write this book was true.

390
00:29:18,650 --> 00:29:20,310
So this is just the way I do it.

391
00:29:20,550 --> 00:29:28,800
You may see variations of the units of work elsewhere, but this is the way that I have come to do it

392
00:29:28,800 --> 00:29:30,070
for various reasons.

393
00:29:30,090 --> 00:29:32,440
Once again, context is king.

394
00:29:33,150 --> 00:29:37,560
So what I'm seeing here is I'm going to call another method.

395
00:29:37,560 --> 00:29:39,660
So I'm going to define a method here.

396
00:29:39,990 --> 00:29:46,560
Just that visual studio generates a method right underneath it for that purpose.

397
00:29:46,950 --> 00:29:52,080
And then I'm just going to say, well, actually know that I'm doing it.

398
00:29:52,110 --> 00:29:56,980
I'm just going to see right here on the score context.

399
00:29:57,810 --> 00:30:06,270
So this pause is really like a garbage collector is just seeing when I'm done or when the operations

400
00:30:06,270 --> 00:30:06,720
are done.

401
00:30:06,720 --> 00:30:08,170
Please free up the memory.

402
00:30:08,760 --> 00:30:13,740
That's that's the purpose here is actually short for garbage collector.

403
00:30:13,740 --> 00:30:16,760
If you look at the description, garbage collector.

404
00:30:17,040 --> 00:30:24,840
So this is seeing when this is called, then please dispose of the context, meaning kill any memory

405
00:30:24,840 --> 00:30:32,670
that the connection to the database was using the connection, all the resources it was using, and

406
00:30:32,670 --> 00:30:36,030
go ahead and do what it would do by default anyway.

407
00:30:37,410 --> 00:30:39,590
So that is it for the disposal.

408
00:30:40,110 --> 00:30:43,350
The next one would be our Sèvres changes.

409
00:30:43,350 --> 00:30:50,160
And this one is actually pretty simple because it's really only one line, at least right now, where

410
00:30:50,160 --> 00:30:55,280
we see await context, dot safe changes async.

411
00:30:55,680 --> 00:30:56,580
Here's the arrow.

412
00:30:56,670 --> 00:30:58,020
I'm seeing it.

413
00:30:58,020 --> 00:30:59,340
But what don't I have?

414
00:30:59,610 --> 00:31:01,620
I don't have the async.

415
00:31:01,890 --> 00:31:05,520
Once I put that there, everything is fine in the world.

416
00:31:05,520 --> 00:31:12,420
So let me just build to see if I have broken anything or if there's anything out of place and I have

417
00:31:12,420 --> 00:31:13,500
a successful build.

418
00:31:13,500 --> 00:31:21,900
So that means I've successfully put in the code for my units of work, at least code wise are syntactically

419
00:31:21,960 --> 00:31:24,450
later on we'll find out if it works or not.

420
00:31:24,690 --> 00:31:29,940
But right now, this is a good victory to have and this task is done.
