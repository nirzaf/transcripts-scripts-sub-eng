1
00:00:01,050 --> 00:00:08,010
All right, so previously we configured our get to method, and this is really the get all method,

2
00:00:08,010 --> 00:00:11,790
but it's not all the time that our client application wants to get everything.

3
00:00:12,120 --> 00:00:14,400
Sometimes they want to get specific data.

4
00:00:14,600 --> 00:00:14,990
All right.

5
00:00:15,000 --> 00:00:23,310
So we want to at least provide them an endpoint where they can get one country based on a particular

6
00:00:23,730 --> 00:00:25,600
unique identifier.

7
00:00:26,070 --> 00:00:27,600
In this case, the ID.

8
00:00:28,030 --> 00:00:28,410
Right.

9
00:00:28,770 --> 00:00:34,230
And just for context, since we're building the API with the context of the actual client.

10
00:00:35,210 --> 00:00:42,080
If you saw a list of countries and you wanted to see the details of one of these countries and you click

11
00:00:42,080 --> 00:00:47,660
The View, then what would happen is that it would go back to the database and get that specific country

12
00:00:48,080 --> 00:00:52,490
to display the specific information or details of that particular country.

13
00:00:53,000 --> 00:00:53,360
All right.

14
00:00:53,540 --> 00:00:59,810
So that's the same thing that we want to provide an endpoint for so that when on their side, when the

15
00:00:59,810 --> 00:01:02,690
user clicks the country, they're in the background.

16
00:01:02,690 --> 00:01:05,950
We'll see which country was tricked here, which IDs there.

17
00:01:06,200 --> 00:01:08,210
Here's the ID API, please.

18
00:01:08,210 --> 00:01:09,410
May I have the details?

19
00:01:09,410 --> 00:01:14,040
And then we say, OK, we'll do the look up the details for that particular country.

20
00:01:14,570 --> 00:01:18,210
So without any further delay, let's get to it.

21
00:01:18,410 --> 00:01:21,470
So I'm actually just going to copy that original get.

22
00:01:22,340 --> 00:01:22,760
All right.

23
00:01:23,120 --> 00:01:26,020
And we're just going to make some minor modifications.

24
00:01:26,270 --> 00:01:30,050
So the first modification would be to the attributes.

25
00:01:30,050 --> 00:01:32,060
So, yes, they're both targets.

26
00:01:32,510 --> 00:01:32,930
Right.

27
00:01:33,440 --> 00:01:40,150
But this get in particular needs to know that it can take a parameter.

28
00:01:40,200 --> 00:01:40,600
Right.

29
00:01:40,770 --> 00:01:45,050
And this is really it has a lot to do with documentation purposes.

30
00:01:45,050 --> 00:01:53,090
And it's good so that when people see it, they can infer at the same time what how it differs as it

31
00:01:53,090 --> 00:01:53,680
goes along.

32
00:01:53,690 --> 00:01:57,680
So you can define the gate, but then you open and close Breece.

33
00:01:57,920 --> 00:02:02,590
And then inside of that you define the template for the gate.

34
00:02:02,600 --> 00:02:08,390
So I can see here that I'm expecting some parameter called ID and it should be off of it.

35
00:02:08,850 --> 00:02:14,420
So if you wanted to get by name, we could do something like name of type street.

36
00:02:14,960 --> 00:02:15,530
All right.

37
00:02:15,950 --> 00:02:23,090
So so you would know that this gate is going to take this parameter name and the names are very important

38
00:02:23,510 --> 00:02:26,570
and that data type, which is also very important.

39
00:02:27,830 --> 00:02:30,380
Next, we are going to have to rename this.

40
00:02:30,380 --> 00:02:31,780
I mean, get countries.

41
00:02:31,820 --> 00:02:33,170
This isn't getting countries.

42
00:02:33,170 --> 00:02:38,960
This is getting a country and it is taking a parameter ID.

43
00:02:39,680 --> 00:02:43,850
So like with any other method anywhere else in C sharp ones, they're calling them.

44
00:02:43,850 --> 00:02:48,950
If that has now you have to pass a perimeter in, you have to define department that that's expecting.

45
00:02:49,220 --> 00:02:53,990
I notice that the name here matches the name that is in the attributes.

46
00:02:54,470 --> 00:02:54,880
All right.

47
00:02:55,370 --> 00:02:58,310
So get country ID.

48
00:02:59,660 --> 00:03:05,810
No, we have to see him try to catch, but then we're going to change the quarry and the mopping up.

49
00:03:06,020 --> 00:03:12,950
So one, we're not getting countries, we're getting in country and we're all in the same elite units

50
00:03:12,950 --> 00:03:16,250
of four countries, what we're calling the get method.

51
00:03:17,120 --> 00:03:17,600
All right.

52
00:03:17,780 --> 00:03:26,930
And our get method notice the red line, the get method requires the expression or the stipulation behind

53
00:03:26,930 --> 00:03:29,030
what exactly it should be getting.

54
00:03:29,390 --> 00:03:32,870
So we have to define in this the expressions.

55
00:03:32,870 --> 00:03:36,320
I remember I said that the expression is really going to be a lambda expressions.

56
00:03:36,320 --> 00:03:43,100
I'm going to pass in that same kind of lambda expression, which is a token lambda arrow, and then

57
00:03:43,100 --> 00:03:45,010
what am I looking for to Dot?

58
00:03:45,260 --> 00:03:48,480
And then I have all the fields off the table.

59
00:03:48,770 --> 00:03:51,780
So this was designed for countries, right?

60
00:03:52,280 --> 00:03:56,750
So what field in the countries tables should I be looking for?

61
00:03:56,960 --> 00:04:05,360
I'm looking for the ID and my my condition is that the ID in the country is stable much as the ID coming

62
00:04:05,360 --> 00:04:06,350
in through the parameter.

63
00:04:07,770 --> 00:04:13,800
All right, and then in the same way, I can include because I'm just thinking about it, if you ask

64
00:04:13,800 --> 00:04:19,860
me for the country within the context of this some other country, I figure that maybe you will want

65
00:04:19,860 --> 00:04:22,950
to see all the hotels for that particular country.

66
00:04:22,960 --> 00:04:29,730
So while looking at the list of countries, you only want to see maybe the list of countries.

67
00:04:29,950 --> 00:04:34,330
However, when you look at one country, you probably want to see the hotel.

68
00:04:35,400 --> 00:04:36,870
So are hotels.

69
00:04:36,880 --> 00:04:41,190
So I want to say a new list somewhere to passing a new list of timestream.

70
00:04:42,790 --> 00:04:51,970
And I'm going to add to it, so this is what we initialize our list and we can say that I want to include

71
00:04:52,090 --> 00:04:53,120
your toes.

72
00:04:53,530 --> 00:05:00,370
So once again, this is not going to go over to our units of work, is going to hit the living, find

73
00:05:00,370 --> 00:05:06,250
the method, which is in the generic repository, and it's going to hit the gate.

74
00:05:06,280 --> 00:05:08,970
So this is the expression, this is the includes.

75
00:05:09,340 --> 00:05:11,410
So it gets all the records.

76
00:05:11,830 --> 00:05:18,540
Then it says if there is and includes, go ahead and include whatever you need to include, include

77
00:05:18,580 --> 00:05:20,280
the hotel's right.

78
00:05:20,470 --> 00:05:28,540
And then we're going to look at Macquarie, take off the tracking and return the first our default record

79
00:05:28,540 --> 00:05:32,480
that matches and default means just return if we can't find anything.

80
00:05:32,480 --> 00:05:35,650
But the first record that matches this expression.

81
00:05:35,650 --> 00:05:40,780
So the expression would be where you got it is equal to the added value.

82
00:05:41,140 --> 00:05:49,900
It will do all of that computation and just return the one record to country with all of the hotels

83
00:05:50,410 --> 00:05:51,440
that are available.

84
00:05:51,460 --> 00:05:57,820
So I'm just going to double check with my domain just to make sure that the thing is called hotels,

85
00:05:57,820 --> 00:06:01,200
because this has to match just the same way in the detail.

86
00:06:01,210 --> 00:06:02,470
It has to be hotels.

87
00:06:02,740 --> 00:06:03,540
All right.

88
00:06:04,090 --> 00:06:09,250
So now that we've done that wiring up, I'm just going to change up my mapping.

89
00:06:09,250 --> 00:06:14,110
So I'm getting back one country object, one object.

90
00:06:14,110 --> 00:06:16,020
So I'm not going to come up to our list.

91
00:06:16,030 --> 00:06:18,660
I'm just mapping to contribute to you.

92
00:06:18,940 --> 00:06:20,470
So that's a one to one mapping.

93
00:06:21,670 --> 00:06:29,550
And I'm just taking off the S's and fixing the plurals under the singular just so that the code is self-explanatory.

94
00:06:29,560 --> 00:06:32,920
We shouldn't be calling these countries when we're only getting one.

95
00:06:32,950 --> 00:06:33,390
Correct.

96
00:06:34,450 --> 00:06:36,430
So I'm just trying to make sure it's readable.

97
00:06:37,140 --> 00:06:37,470
All right.

98
00:06:37,570 --> 00:06:43,490
And then we're just going to see something went wrong in the name of get country.

99
00:06:44,260 --> 00:06:44,700
All right.

100
00:06:44,980 --> 00:06:47,560
So let us take this one for a spin.

101
00:06:47,560 --> 00:06:50,790
So you see the gets really straightforward, right?

102
00:06:50,800 --> 00:06:56,830
We did one there and we just took the quarter with a few modifications where potentially done with it.

103
00:06:56,830 --> 00:06:57,790
So let's see what.

104
00:06:58,270 --> 00:07:01,460
So the first thing I want to bring attention to is the documentation.

105
00:07:01,460 --> 00:07:07,450
So you see API slash country and see API slash country slash IDE.

106
00:07:07,720 --> 00:07:13,020
So that idea being displayed there is courtesy of our annotation here.

107
00:07:13,780 --> 00:07:14,220
All right.

108
00:07:14,560 --> 00:07:21,910
And then if we drilldown into it, you'll see that they're actually seeing that ID parameter is required.

109
00:07:22,450 --> 00:07:24,130
No two ways about it.

110
00:07:24,550 --> 00:07:25,410
It's required.

111
00:07:25,870 --> 00:07:26,250
Right.

112
00:07:26,710 --> 00:07:29,380
And if we say try it out, we can put in that.

113
00:07:29,620 --> 00:07:33,580
But I'm going to put I'm going to use postmen to test this one.

114
00:07:33,580 --> 00:07:34,040
All right.

115
00:07:34,480 --> 00:07:36,850
So when I say get.

116
00:07:37,880 --> 00:07:46,640
Right, with Bowsman and the same end point and says, and I'm getting the original get, which is getting

117
00:07:46,640 --> 00:07:53,300
the list, no, when I modify this end point and I say slash one.

118
00:07:54,350 --> 00:08:01,130
All right, and then click send look out what I get back, so I'm getting back only one result and this

119
00:08:01,130 --> 00:08:08,600
is the idea and it's the list of hotels, which there's only one hotel associated with hotel number

120
00:08:08,600 --> 00:08:08,990
one.

121
00:08:09,200 --> 00:08:11,980
So country number one, there's only one hotel.

122
00:08:11,990 --> 00:08:13,240
But this is unary.

123
00:08:13,700 --> 00:08:19,360
So if there are more than all of them will be listed on that property or attributes.

124
00:08:19,610 --> 00:08:22,460
And then the name is Jumia kind of short name is Jim.

125
00:08:22,590 --> 00:08:26,180
So you see our second guest is working.

126
00:08:26,180 --> 00:08:32,920
So let me just put our break point and show you exactly what is happening when we meet that request.

127
00:08:33,290 --> 00:08:40,250
So putting our break point there and then clicking send again, Bridgepoint is activated.

128
00:08:40,410 --> 00:08:44,820
If we look in the parameter listing, we see our value one coming over.

129
00:08:45,230 --> 00:08:45,890
All right.

130
00:08:46,220 --> 00:08:48,890
And then we can go ahead and.

131
00:08:50,180 --> 00:08:56,210
I'm going to use Epton, so if it doesn't go into all of the method, cause what if I look at the country

132
00:08:56,210 --> 00:09:03,260
object coming back, you see hotels and that's the list with only one idea, the name, the short name,

133
00:09:03,410 --> 00:09:04,750
and then we do the mapping.

134
00:09:05,120 --> 00:09:09,500
So no result has all of the data that was just in country.

135
00:09:09,650 --> 00:09:12,660
And then it's going to return to Occy with results.

136
00:09:12,660 --> 00:09:19,700
So it's automatically going to be serialized into serialized into JSON layouts.

137
00:09:20,680 --> 00:09:21,050
All right.

138
00:09:21,260 --> 00:09:24,320
And right there, we're done with our second get.

139
00:09:24,560 --> 00:09:33,380
So now we know to get all I know, we know how to get by based on a particular requirements.
