1
00:00:00,680 --> 00:00:01,370
Welcome back.

2
00:00:01,370 --> 00:00:07,280
In this lesson, we're going to start setting up our data classes and by extension our data base, that

3
00:00:07,340 --> 00:00:14,690
we'll be using an intuitive framework, which is Microsoft or course flagship object, relational mapper

4
00:00:14,690 --> 00:00:16,070
or for short.

5
00:00:16,400 --> 00:00:25,190
And they allow us to actually model our database classes or database tables, rather, as C sharp classes

6
00:00:25,430 --> 00:00:30,390
and then engineer our database based on our class definitions.

7
00:00:30,800 --> 00:00:36,510
So what we're going to be doing to get things started is creating a new folder in our project.

8
00:00:36,530 --> 00:00:44,720
So just right click, go to add and click new folder and I will just call this data now inside data.

9
00:00:44,750 --> 00:00:54,500
We're going to start putting in our classes so our hotel listing or API will really just for educational

10
00:00:54,500 --> 00:01:01,220
purposes, only have two classes or two tables, one for the country and one for the hotel.

11
00:01:01,520 --> 00:01:08,000
So basically, when we look for our country, we should be able to see all the hotels that are associated

12
00:01:08,240 --> 00:01:09,650
with said country.

13
00:01:09,650 --> 00:01:12,440
That's basically the idea that we're going for.

14
00:01:12,600 --> 00:01:12,910
All right.

15
00:01:13,340 --> 00:01:21,300
So I'm just going to go ahead and click data, click, add, and our first class will be country.

16
00:01:22,910 --> 00:01:27,430
So notice I'm going to name it in a singular fashion country.

17
00:01:27,800 --> 00:01:30,620
The next one would be hotel.

18
00:01:31,520 --> 00:01:40,760
So this each class represents one unit, country and a hotel before we start defining the fields for

19
00:01:40,760 --> 00:01:41,130
either.

20
00:01:41,150 --> 00:01:46,850
I just want to get all the files in place and then we can just work our way back and see how everything

21
00:01:46,850 --> 00:01:47,370
ties in.

22
00:01:47,840 --> 00:01:54,380
So after we have defined our classes, at least these two, I want to just go ahead and create what

23
00:01:54,380 --> 00:01:57,050
we call our DB context class.

24
00:01:57,440 --> 00:02:05,690
So I'm going to call it data base context and go ahead and add that.

25
00:02:05,690 --> 00:02:14,990
And then this class is really going to represent our bridge between our defined classes or entity classes

26
00:02:14,990 --> 00:02:17,030
and the actual database.

27
00:02:17,510 --> 00:02:23,870
So country that's an entity that's going to be formed, engineered into a table or whatever we define

28
00:02:23,870 --> 00:02:26,240
as feels, will soon double back and do that.

29
00:02:26,510 --> 00:02:32,900
But whatever field we put in country will be fills in a table called whatever we call it.

30
00:02:32,910 --> 00:02:38,930
So we're going to call the table countries because the table is effectively a collection of records

31
00:02:39,170 --> 00:02:40,580
of type country.

32
00:02:41,120 --> 00:02:47,900
The same goes for hotel and the same will go for as many other entities slash tables as you may have

33
00:02:47,900 --> 00:02:48,650
to define.

34
00:02:48,920 --> 00:02:55,790
So this is what we call code first engineering, where we actually write all the code for how we think

35
00:02:55,790 --> 00:03:01,890
our tables should look and then forward engineer or make adjustments to the table accordingly.

36
00:03:02,510 --> 00:03:09,890
So after creating this database context, we need to kind of outfitted with things that it needs to

37
00:03:09,890 --> 00:03:12,130
know that it is the bridge to the database.

38
00:03:12,140 --> 00:03:17,180
So the first thing that it needs to know is that it inherits from DB context.

39
00:03:17,230 --> 00:03:22,250
Now, this is going to give an error because I need to go and fetch some tools.

40
00:03:22,250 --> 00:03:29,000
But then when I control of not you, you'll see Visual Studio suggesting that you installed the missing

41
00:03:29,000 --> 00:03:32,810
package, which is Microsoft thought entity framework core.

42
00:03:33,110 --> 00:03:35,570
If you're not seeing this prompt, no problem.

43
00:03:35,780 --> 00:03:37,580
You can always just go right.

44
00:03:37,580 --> 00:03:44,990
Click the project, go to management you get and then you can search for the same package.

45
00:03:44,990 --> 00:03:51,110
Just go to Brose and type in the package name and you would see it listed there.

46
00:03:51,120 --> 00:03:52,430
So either one works.

47
00:03:52,430 --> 00:03:58,670
But while I'm here, I'm just going to get all of the the libraries from here that's I know I'm going

48
00:03:58,670 --> 00:03:58,940
to need.

49
00:03:58,940 --> 00:04:01,760
So I'm definitely going to need this library.

50
00:04:01,760 --> 00:04:03,380
So I just don't load that one.

51
00:04:04,890 --> 00:04:12,300
And once again, I know I'm definitely going to need the driver for Eskil server because we'll be using

52
00:04:12,420 --> 00:04:13,990
SQL Server databases.

53
00:04:14,280 --> 00:04:18,420
That being said, there are other ones for other database engines.

54
00:04:18,420 --> 00:04:21,830
So you can use to see what light you have.

55
00:04:22,440 --> 00:04:27,360
I've seen post, Griss, I'm not seeing it listed here, at least not immediately.

56
00:04:27,570 --> 00:04:28,620
But they're all here.

57
00:04:28,620 --> 00:04:30,870
So we'll be using SQL Server.

58
00:04:31,050 --> 00:04:32,670
So I'll go ahead and get that one.

59
00:04:33,540 --> 00:04:40,080
And the final one that we're getting, at least for this period, is the set of tools because we need

60
00:04:40,080 --> 00:04:43,200
the tools to be able to run some commands in the future.

61
00:04:43,230 --> 00:04:45,390
So I just go ahead and install that one also.

62
00:04:48,480 --> 00:04:54,000
All right, so now that we're done in, you get if you don't want to check over and installed, if you

63
00:04:54,000 --> 00:04:58,630
clear the filter, you'll see everything that you have installed, that's fine.

64
00:04:59,100 --> 00:05:03,630
So I'm going to go back to my DB context and then I'm going to control that again.

65
00:05:03,630 --> 00:05:09,060
And then the prompt no changes to include the using statement because we already have the library at

66
00:05:09,060 --> 00:05:13,090
this point, though, inside of our repository.

67
00:05:13,410 --> 00:05:15,900
Well, sorry, our database context.

68
00:05:16,200 --> 00:05:23,340
What we need to do is define a constructor, someone to see a public database context.

69
00:05:23,580 --> 00:05:26,680
Or I could have just done Setar tab tab.

70
00:05:27,000 --> 00:05:27,740
There we go.

71
00:05:28,260 --> 00:05:33,530
And then I'm going to take the parameter DB context options.

72
00:05:34,890 --> 00:05:37,190
So this will be passed on from the start up.

73
00:05:37,220 --> 00:05:42,860
But we haven't defined all of that yet, so we're just auditing it right now.

74
00:05:43,500 --> 00:05:51,490
And then what I need to do is also initialize the base controller constructor for the context to take

75
00:05:51,510 --> 00:05:59,910
the same options for no, we don't need to put anything else inside of the constructor so we can just

76
00:05:59,910 --> 00:06:01,930
leave that blank and move on.

77
00:06:02,340 --> 00:06:11,280
So I did say that this represents the bridge between our application and our database.

78
00:06:11,280 --> 00:06:18,090
So it is here that we actually list out what the database should know about when it is being generated.

79
00:06:18,120 --> 00:06:21,510
So in short, our terms are more practical terms.

80
00:06:21,930 --> 00:06:28,680
I want to say a public DB set, give this DB set a data type, which in this case could be called entry.

81
00:06:30,180 --> 00:06:36,660
And then I'm going to give the property a name, which would be countries, so the name that you give

82
00:06:36,660 --> 00:06:40,670
it here is the name that the database will use.

83
00:06:41,190 --> 00:06:46,110
So the data type, as far as Sharp is concerned this country.

84
00:06:46,620 --> 00:06:54,060
But then the database is going to define a table called countries, and whenever we're accessing it,

85
00:06:54,390 --> 00:06:55,910
access it those countries.

86
00:06:56,250 --> 00:06:57,990
So that is a minor thing.

87
00:06:58,230 --> 00:07:03,300
I mean, everybody has their own naming convention and some people use a common letter for their table

88
00:07:03,300 --> 00:07:03,710
names.

89
00:07:03,720 --> 00:07:04,940
I don't like to do that.

90
00:07:04,950 --> 00:07:11,350
I like to keep my table names, plural and the data type singular because this is one country.

91
00:07:11,370 --> 00:07:13,800
But and this is a collection of countries.

92
00:07:14,010 --> 00:07:15,810
After all, this is a set.

93
00:07:15,810 --> 00:07:17,640
It's a set of countries.

94
00:07:17,850 --> 00:07:23,340
It no matter how you want to justify it, that's that's my justification.

95
00:07:23,340 --> 00:07:25,680
Once again, context rules, everything.

96
00:07:25,680 --> 00:07:29,250
So I'll do the same for hotel and hotels.

97
00:07:29,580 --> 00:07:31,160
So there we go.

98
00:07:31,170 --> 00:07:36,900
After doing all of this, we need to let our upset things know about the connection string.

99
00:07:36,900 --> 00:07:45,090
So the connection string is basically just as good as the name suggests, a string that outlines how

100
00:07:45,330 --> 00:07:48,920
to get to the database that the application needs to connect to.

101
00:07:48,960 --> 00:07:56,820
So what I'm going to do here is create a new section and it's automatically giving me connection strings.

102
00:07:57,210 --> 00:07:57,690
Right.

103
00:07:58,020 --> 00:08:04,980
And inside there, I'm just going to call this let's call it a secure connection.

104
00:08:07,430 --> 00:08:18,620
And Eskil Connection is going to have server equals and we have a local DB that is kind of built into

105
00:08:18,620 --> 00:08:19,530
visual studio.

106
00:08:19,970 --> 00:08:25,130
So at this point, you may have your own database that you want to use.

107
00:08:25,130 --> 00:08:30,680
If if not, and you're a beginner and you're just following along, then you may use this one that's

108
00:08:30,680 --> 00:08:33,680
defaulted off to do much more any more installation.

109
00:08:33,690 --> 00:08:38,000
Actually, it's already included with your visual studio installation.

110
00:08:38,360 --> 00:08:44,340
However, at this point, if you have like an obscure server, you know, whether it's localhost or,

111
00:08:44,340 --> 00:08:49,260
you know, the IP address, that's what you would put in as a server value instead of what I have here.

112
00:08:49,700 --> 00:08:50,110
All right.

113
00:08:50,420 --> 00:08:55,340
But continuing, we also define a database names.

114
00:08:55,340 --> 00:09:05,060
So the database that we should look for slash create, I'm going to call it hotel listings for listing

115
00:09:05,090 --> 00:09:06,200
on the scoreboard.

116
00:09:06,830 --> 00:09:12,970
So that's the name of the database that's I would like to interact with on that server.

117
00:09:13,490 --> 00:09:22,790
And then just one more very important or relatively important option, which is integrated security

118
00:09:22,940 --> 00:09:24,880
and that agency equals.

119
00:09:24,890 --> 00:09:25,230
Sure.

120
00:09:25,760 --> 00:09:28,520
So that's what our connection string looks like.

121
00:09:29,060 --> 00:09:32,210
So everything will come together after a while.

122
00:09:32,210 --> 00:09:37,620
We're just doing it bit by bit and building up to when everything is integrated.

123
00:09:38,480 --> 00:09:41,390
So our next step is to go over to our start.

124
00:09:41,510 --> 00:09:41,660
So.

125
00:09:41,660 --> 00:09:46,850
I did say that when we define the context is getting into options from the start.

126
00:09:46,970 --> 00:09:54,890
So the startup needs to know that when the application starts, it should be loading its database configuration

127
00:09:54,890 --> 00:09:58,970
from here and using this file as the bridge.

128
00:09:59,010 --> 00:09:59,410
All right.

129
00:09:59,870 --> 00:10:02,630
So what we're going to do is add a new section.

130
00:10:02,630 --> 00:10:05,270
Actually, let me just riada this a bit.

131
00:10:05,270 --> 00:10:11,960
So I like to add controllers as last or near to the last thing I do in configure services.

132
00:10:12,000 --> 00:10:16,870
I like to do everything else before I add controller so you can just go ahead and move that line.

133
00:10:17,360 --> 00:10:21,980
So services that add DB context.

134
00:10:22,580 --> 00:10:25,190
And so I call the database context.

135
00:10:25,190 --> 00:10:33,500
The code, the function is it's looking for a DB context and then what it expects is something off type

136
00:10:34,040 --> 00:10:35,270
DB context.

137
00:10:35,300 --> 00:10:37,130
So this is of type DB context.

138
00:10:37,140 --> 00:10:39,350
This is my context that I'm creating.

139
00:10:39,620 --> 00:10:48,280
So I'm going to pass that in as that data type is looking for, of course, including any missing references.

140
00:10:48,290 --> 00:10:49,000
There we go.

141
00:10:49,640 --> 00:10:53,090
And then here's the part options.

142
00:10:53,540 --> 00:10:53,760
Right?

143
00:10:53,880 --> 00:11:01,960
So we have that little lambda initialized that we're used to by now or it's not foreign to us by now.

144
00:11:02,510 --> 00:11:04,880
So four options.

145
00:11:05,810 --> 00:11:07,850
I'm going to say use.

146
00:11:08,970 --> 00:11:10,380
Escudo.

147
00:11:11,530 --> 00:11:19,330
Server, all right, and remember that when when when you get just not included that ESKIL server library,

148
00:11:19,360 --> 00:11:24,640
say, if I just control Duchesse here, it's being include that using statement.

149
00:11:24,790 --> 00:11:25,290
All right.

150
00:11:25,600 --> 00:11:33,130
So use a secure server and then it's going to want to know, OK, so where am I getting the configuration

151
00:11:33,130 --> 00:11:33,390
from?

152
00:11:33,400 --> 00:11:39,460
So I went to see a configuration that get your connection string.

153
00:11:40,690 --> 00:11:41,580
Get connections.

154
00:11:41,920 --> 00:11:42,570
There we go.

155
00:11:43,910 --> 00:11:47,970
And then this is automatically upsetting.

156
00:11:48,260 --> 00:11:55,430
So it says good connection string, because it's already knows that there might be a section for connection

157
00:11:55,490 --> 00:11:55,910
strings.

158
00:11:56,180 --> 00:12:01,790
And I'm saying get the connection string with that name so you can actually find multiple connections,

159
00:12:01,790 --> 00:12:02,380
strings here.

160
00:12:02,380 --> 00:12:06,740
You just need to separate them and each one of its unique name.

161
00:12:07,020 --> 00:12:12,980
And at that point, you could actually configure different database contexts for different databases

162
00:12:12,980 --> 00:12:20,230
in the same application, which could come in handy if your API needed to span multiple databases.

163
00:12:20,240 --> 00:12:27,410
So there are a number of benefits to having an API because it's not limited to one database on one set

164
00:12:27,410 --> 00:12:28,810
of interactions.

165
00:12:28,830 --> 00:12:29,120
Right.

166
00:12:29,780 --> 00:12:31,930
So get connected on string.

167
00:12:32,030 --> 00:12:39,200
I'll go ahead and pass in that name, closing all the bridges that need to be closed.

168
00:12:40,140 --> 00:12:49,470
And now I believe that we have everything later on, we'll come back and modify this one, we need some

169
00:12:49,470 --> 00:12:51,750
other functionality added.

170
00:12:52,380 --> 00:12:55,860
But for now, OK, add an extra semicolon.

171
00:12:55,860 --> 00:12:56,610
So there we go.

172
00:12:56,610 --> 00:13:00,120
So far, no, we have all we need.

173
00:13:01,170 --> 00:13:07,470
Before I move any further, I'm just going to double back and we are going to complete our class definitions.

174
00:13:07,470 --> 00:13:10,980
So we have a hotel and we have country.

175
00:13:11,460 --> 00:13:13,020
So country.

176
00:13:13,650 --> 00:13:17,760
And I'm just going to say Tabatabai Tab is going to have an ID.

177
00:13:17,940 --> 00:13:25,710
So Entity Framework's is if you create a field called, I automatically assume that this is the primary

178
00:13:25,710 --> 00:13:26,030
key.

179
00:13:26,400 --> 00:13:26,690
All right.

180
00:13:26,700 --> 00:13:28,140
So you have two options.

181
00:13:28,140 --> 00:13:31,980
You can see it or you can see the entity name ID.

182
00:13:32,010 --> 00:13:35,910
You will automatically say, OK, well, I'll just use this as a primary key.

183
00:13:36,390 --> 00:13:38,310
And so I'd be right there.

184
00:13:38,820 --> 00:13:40,170
That one is the key.

185
00:13:40,170 --> 00:13:49,320
And let's see, a country also has a name, so country name and one more.

186
00:13:49,450 --> 00:13:57,150
So just use control D to duplicate that line and we see maybe area or Schadt, maybe that's just the

187
00:13:57,150 --> 00:13:57,450
start.

188
00:13:58,230 --> 00:14:05,130
So in my case, the first country that I would put in is Jamaica and the short name would be GM.

189
00:14:05,430 --> 00:14:09,320
And then based on the country, of course the short name is different.

190
00:14:09,350 --> 00:14:09,570
Right.

191
00:14:10,020 --> 00:14:17,070
So that those are the fields that I expect the country to be able to have when the database is generated.

192
00:14:17,700 --> 00:14:22,500
So I'm going to save that one and I'm going to look at Hotel No.

193
00:14:23,530 --> 00:14:29,470
So to start off, we can take it in name because I mean, we have to have the primary key.

194
00:14:29,830 --> 00:14:36,700
Every hotel has a name, but then I have some other fields here, including address, which is string

195
00:14:36,700 --> 00:14:43,850
the rating, which is a double and then a foreign key reference to our country.

196
00:14:43,870 --> 00:14:46,580
So let me explain this.

197
00:14:46,600 --> 00:14:52,360
So if you know about databases, you know that the primary keys, the unique identifier for any given

198
00:14:52,360 --> 00:14:56,860
table, the foreign key represents unique reference.

199
00:14:56,900 --> 00:15:05,180
Art may not be unique, but it is a strong reference to another record in another table.

200
00:15:05,530 --> 00:15:09,300
In other words, any hotel has to be in a country.

201
00:15:09,640 --> 00:15:13,500
So we have the hotel, we give it the name and address.

202
00:15:13,520 --> 00:15:16,150
It's rating, but then we let it know.

203
00:15:16,180 --> 00:15:21,190
We we give an I.D. here that corresponds with a country ID.

204
00:15:21,670 --> 00:15:22,110
All right.

205
00:15:22,420 --> 00:15:24,790
So we have to define two fields.

206
00:15:25,150 --> 00:15:27,790
We have data annotation here.

207
00:15:27,790 --> 00:15:32,980
So square, various foreign key and you give it the name that you want.

208
00:15:32,980 --> 00:15:37,760
So you could actually give this foreign key feel a different name if you wanted to.

209
00:15:37,960 --> 00:15:43,750
You could manually put in your name or in this case, I'm just going to give you the same name as the

210
00:15:43,750 --> 00:15:45,280
class that it's referencing.

211
00:15:45,280 --> 00:15:47,400
So name off whatever class.

212
00:15:47,410 --> 00:15:47,720
Right?

213
00:15:48,430 --> 00:15:50,050
Then we have two properties.

214
00:15:50,050 --> 00:15:56,770
We have country as an object and then we have it as an integer.

215
00:15:56,770 --> 00:15:59,110
So it is the hard reference.

216
00:15:59,110 --> 00:16:05,770
That's the ID value, the one, the two of the three, etc. However, country represents the actual

217
00:16:05,770 --> 00:16:06,190
object.

218
00:16:06,190 --> 00:16:09,190
So we can include all the details here.

219
00:16:09,190 --> 00:16:15,910
When we look at a hotel, if we wanted to know the name of the country, all we have natively instead

220
00:16:15,910 --> 00:16:17,710
of hotel is the clincher ID.

221
00:16:17,950 --> 00:16:26,530
But then we can fill this object with all the details so we can see in hotel dot, country dot, whatever

222
00:16:26,530 --> 00:16:31,150
properties that we wish to include in our data.

223
00:16:31,570 --> 00:16:39,160
So this is a nice and easy way to one create a foreign key reference to another table and to make sure

224
00:16:39,160 --> 00:16:45,730
that when we pull a query for a table that has foreign keys all over the place, we can include all

225
00:16:45,730 --> 00:16:52,750
the details right here without getting too many messy joins and having to jump through hoops to get

226
00:16:52,750 --> 00:16:53,250
into the.

227
00:16:54,280 --> 00:17:00,250
So now that we have all of these details defined, let me just do a quick run through just to make sure

228
00:17:00,250 --> 00:17:01,600
we're all on the same page.

229
00:17:01,960 --> 00:17:08,560
We have our folder called Data in which we're going to be storing all of our domain or database related

230
00:17:08,560 --> 00:17:09,830
objects and code.

231
00:17:10,120 --> 00:17:13,690
All of that will be stored inside of this folder called data.

232
00:17:14,470 --> 00:17:20,260
Later on, we can look at maybe putting it in its own project, but for now, it's just three files

233
00:17:20,260 --> 00:17:22,260
or a few number files.

234
00:17:22,270 --> 00:17:24,190
So we don't need to do all of that.

235
00:17:24,520 --> 00:17:32,980
So data has a file called Country, which is defining our countries table and one called hotel, which

236
00:17:32,980 --> 00:17:34,760
is defining the hotels table.

237
00:17:35,080 --> 00:17:42,390
We also have the database context, which is inheriting from DB context, courtesy of Entity Framework

238
00:17:42,390 --> 00:17:50,300
Core, which is once again acting as our bridge between our data classes and the actual database.

239
00:17:50,650 --> 00:17:51,040
All right.

240
00:17:51,490 --> 00:17:53,280
How does it get to the database?

241
00:17:53,290 --> 00:18:02,200
Well, one, we have the connection string that defines where to look, what to look for and yes, look

242
00:18:02,200 --> 00:18:03,160
for security.

243
00:18:03,250 --> 00:18:03,560
Right.

244
00:18:04,150 --> 00:18:07,180
So that is our connection string.

245
00:18:07,780 --> 00:18:16,420
Otherwise, at Stato, we want to add the deed context or add that bridge to the database courtesy of

246
00:18:16,420 --> 00:18:17,320
this file.

247
00:18:17,860 --> 00:18:22,090
And this file should be using this connection string.

248
00:18:24,110 --> 00:18:27,740
OK, sorry, I just had one extra brace, I just removed it.

249
00:18:28,250 --> 00:18:35,120
All right, so let us do a quick build before we proceed to engineer or database.

250
00:18:36,090 --> 00:18:43,290
And to do a build, you can to hold on control, shift and press be or you can go to build here and

251
00:18:43,290 --> 00:18:46,560
build solution, but we have a successful bill.

252
00:18:46,560 --> 00:18:49,190
So let's go over to the package manager console.

253
00:18:49,210 --> 00:18:55,950
If you're not seeing it there, you can always go to and new get package manager and package manager

254
00:18:55,950 --> 00:18:56,650
console.

255
00:18:57,060 --> 00:18:57,470
All right.

256
00:18:57,810 --> 00:19:06,090
So here is where that entity Framework for Tools Library comes in handy because it allows us to run

257
00:19:06,090 --> 00:19:09,450
certain commands here to facilitate the scaffolding.

258
00:19:09,660 --> 00:19:14,150
And that's what it's called, scaffolded in the database, the creation of the database.

259
00:19:14,490 --> 00:19:15,990
We have to run certain commands.

260
00:19:16,020 --> 00:19:21,720
So what we have to do is first add to what we call a migration's Adarsh migration.

261
00:19:22,200 --> 00:19:30,180
If you start typing apress, it will kind of autocomplete and then I'll see creation.

262
00:19:30,190 --> 00:19:33,090
That's a database created.

263
00:19:33,860 --> 00:19:34,310
All right.

264
00:19:34,710 --> 00:19:37,650
So we had the migration database created.

265
00:19:37,860 --> 00:19:48,990
So this is basically going to generate like a manifest or a preliminary file to see that it is generating

266
00:19:48,990 --> 00:19:50,790
and see I'm getting an error.

267
00:19:50,820 --> 00:19:51,660
So this is good.

268
00:19:52,200 --> 00:19:58,470
It's good when we see these errors and we work through them, because sometimes when we go through perfectly,

269
00:19:58,470 --> 00:20:01,020
we don't know what might happen.

270
00:20:01,740 --> 00:20:02,130
All right.

271
00:20:02,140 --> 00:20:11,480
So this arrow has to do with the country property in the hotel class, and I believe that uses the Arden's.

272
00:20:11,490 --> 00:20:14,910
So what I've done is to reorder it.

273
00:20:14,910 --> 00:20:17,790
So I had the ID underneath the property.

274
00:20:18,180 --> 00:20:19,670
That's what it looks like initially.

275
00:20:20,040 --> 00:20:27,360
So I'm just going to reorder by taking the property, the integer property and putting it directly underneath

276
00:20:27,360 --> 00:20:30,950
the annotation for a foreign key and moving that down.

277
00:20:30,990 --> 00:20:35,430
So as you can see, it can be sensitive Artomatic with some things.

278
00:20:36,330 --> 00:20:38,550
So let's see if this works.

279
00:20:38,600 --> 00:20:42,120
I'm just going to rerun this command at migration.

280
00:20:43,590 --> 00:20:49,980
And we are getting a completely different vibe where it is seeing Bill started, succeeded and is letting

281
00:20:49,980 --> 00:20:53,980
us know that if we want to undo, we can run this, which means it has been done right.

282
00:20:54,360 --> 00:21:01,680
So here we have our migration file and then we see that we've got a new folder called Migration's.

283
00:21:01,950 --> 00:21:08,630
And what it does is take snapshots of each instance of the database.

284
00:21:08,660 --> 00:21:16,520
So at this point, we're defining our table countries with these column attributes and these properties.

285
00:21:16,530 --> 00:21:22,070
And if you look if you look at it closely, I don't want us to analyze it too much because, you know,

286
00:21:22,080 --> 00:21:23,190
it can be overwhelming.

287
00:21:23,490 --> 00:21:28,830
But if you look at it as somebody who is familiar with the C sharp language, you realize that it's

288
00:21:28,830 --> 00:21:35,580
not seeing anything out of the ordinary, seeing we have a table or we're creating a table, write the

289
00:21:35,580 --> 00:21:43,020
name of it is countries based on what we define in the DB context, countries that the columns in the

290
00:21:43,020 --> 00:21:48,050
table should be idy, which is column of type in it.

291
00:21:48,330 --> 00:21:52,080
And we're defining it as identity to increment by one.

292
00:21:52,840 --> 00:21:53,360
Right.

293
00:21:53,490 --> 00:21:54,930
That's all it's really doing.

294
00:21:54,930 --> 00:22:03,110
Name is string, which should be defined as inva char because in in a secure server, a strong Israel

295
00:22:03,110 --> 00:22:10,490
inva char and short name and char right there were there could be controls that could put our own maybe

296
00:22:10,500 --> 00:22:12,980
the size and if it's moldable.

297
00:22:13,440 --> 00:22:13,720
Right.

298
00:22:13,800 --> 00:22:16,920
But then those are things that we can look at later on.

299
00:22:17,940 --> 00:22:23,410
Ultimately, though, we see here that we have our migration and it looks good.

300
00:22:23,430 --> 00:22:28,650
So the next step would be to actually create the database.

301
00:22:29,060 --> 00:22:29,510
All right.

302
00:22:29,730 --> 00:22:38,730
So what we do is go back to our package manager, console and roon, update the database and give that

303
00:22:38,730 --> 00:22:39,110
a few.

304
00:22:39,390 --> 00:22:43,410
And then when it is done, it will let us know with a simple done.

305
00:22:43,920 --> 00:22:45,150
So how do we check?

306
00:22:45,200 --> 00:22:46,200
How do we verify?

307
00:22:46,230 --> 00:22:50,010
So you can go over to the Eskil server object explorer.

308
00:22:50,010 --> 00:22:52,500
I have it open here if you don't have it.

309
00:22:52,530 --> 00:22:57,620
There you go to view and you choose a secure server object explorer.

310
00:22:57,960 --> 00:23:05,040
So in the server Object Explorer, we go to the very server that I did see was built into Visio studio,

311
00:23:05,040 --> 00:23:10,830
which is Loka DB slash Ms Escarole logo, DB or so.

312
00:23:10,830 --> 00:23:16,670
You can expand that, go to databases and then you will see the database listed there.

313
00:23:16,680 --> 00:23:21,990
So hotel listing DB and when we drilldown and drilldown we'll see our countries.

314
00:23:22,170 --> 00:23:26,610
You'll also see that they're tracking all of the migrations happening.

315
00:23:26,610 --> 00:23:32,430
So each time you make a change to the cross that said, somebody came and said, oh, we need to extend

316
00:23:32,430 --> 00:23:38,790
control, we need to put on dialling code or area code, whatever it is, then you add a new field,

317
00:23:38,790 --> 00:23:44,760
you create a new migration, you update the database, you will create one more file like this to say

318
00:23:44,760 --> 00:23:50,160
this is the change should be made and then of the database will go ahead and make those changes on your

319
00:23:50,160 --> 00:23:50,660
behalf.

320
00:23:51,210 --> 00:23:51,780
That's good.

321
00:23:51,780 --> 00:23:53,220
In a development environment.

322
00:23:53,220 --> 00:23:55,920
In a production environment, not so much.

323
00:23:56,190 --> 00:23:57,750
There will be far more controls.

324
00:23:57,750 --> 00:24:01,740
Our own hold updates to the database are handled.

325
00:24:02,010 --> 00:24:08,510
But for now, when we're building from scratch, it's good to understand how to do so efficient.

326
00:24:09,060 --> 00:24:10,350
So that's it for now.

327
00:24:10,380 --> 00:24:15,720
What we did today was we defined our data classes, our domain classes.

328
00:24:15,720 --> 00:24:17,400
We set up our DB context.

329
00:24:17,610 --> 00:24:19,440
We did all of this from scratch.

330
00:24:19,830 --> 00:24:20,460
All right.

331
00:24:20,460 --> 00:24:21,480
And that's good.

332
00:24:21,690 --> 00:24:24,000
It's good to understand how everything connects.

333
00:24:24,330 --> 00:24:26,360
So we have the database context.

334
00:24:26,370 --> 00:24:31,320
The classes are the DB sets and the respective names.

335
00:24:31,470 --> 00:24:36,510
I remember whatever you call the properties here, that's what the table will get called.

336
00:24:36,810 --> 00:24:44,580
If you need to undo the migration, it becomes a bit tricky because if you just to remove migration,

337
00:24:46,080 --> 00:24:51,240
you will get an arrow where it will tell you that the migration has already been applied.

338
00:24:51,540 --> 00:25:01,170
So you would have to revert this change to the database on a hole which since it's in the young stages,

339
00:25:01,170 --> 00:25:08,490
you might as well just you could actually just go and delete the database, make your changes, create

340
00:25:08,490 --> 00:25:11,960
a new migration and do an update database.

341
00:25:11,970 --> 00:25:12,210
Right.

342
00:25:12,220 --> 00:25:18,870
So if you do need the database, then into the framework won't be won't be telling you that something

343
00:25:18,870 --> 00:25:20,720
has been applied to a database that's not there.

344
00:25:20,730 --> 00:25:22,560
It would allow you to remove migration.

345
00:25:22,890 --> 00:25:29,760
You make changes to whatever classes, then you do everything again at migration update and then it

346
00:25:29,760 --> 00:25:32,310
would scaffolded database with your changes.

347
00:25:32,550 --> 00:25:37,950
Otherwise, if it is not as serious as removing moving migration, you just wanted to add or remove

348
00:25:37,950 --> 00:25:38,580
something.

349
00:25:38,790 --> 00:25:42,990
You go ahead, make your changes to your domain classes accordingly.

350
00:25:43,440 --> 00:25:51,090
Then you add migration of the database and it will take a snapshot once again at each point.

351
00:25:51,570 --> 00:25:58,230
So when we come back, we will look at how we can see data into the tables, meaning when the when the

352
00:25:58,230 --> 00:26:04,770
migration happens, we just put data in before we even get into the API because it's nice to have test

353
00:26:04,770 --> 00:26:11,850
data there before we start putting in data through our actual testing of the API.
