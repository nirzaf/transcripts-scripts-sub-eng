1
00:00:00,840 --> 00:00:01,740
Welcome back, guys.

2
00:00:01,770 --> 00:00:08,520
So today we want to just have a quick run through of Swagga, how it ties into our API development and

3
00:00:08,520 --> 00:00:09,930
what its purpose is.

4
00:00:10,350 --> 00:00:16,980
So Swagga really is there to help simplify API development for users, teams and enterprises.

5
00:00:17,250 --> 00:00:25,290
It's an open source tool set and it basically helps us to design and document our database with much

6
00:00:25,290 --> 00:00:29,350
less effort than it would really take to have this level of detail.

7
00:00:29,370 --> 00:00:31,610
So it's a really good tool.

8
00:00:31,800 --> 00:00:34,320
It helps us to automate a lot of things.

9
00:00:34,560 --> 00:00:40,670
And the best parts of it all is that it is already included with our API.

10
00:00:41,010 --> 00:00:44,200
So in previous versions we would have to go and install it.

11
00:00:44,280 --> 00:00:51,780
Granted, it wasn't a very difficult process, but now that Microsoft has seen that it is kind of a

12
00:00:51,780 --> 00:00:57,180
standard that everybody with an API wants to put in structure because it's so cool, so efficient,

13
00:00:57,420 --> 00:01:03,180
that's everything it's doing, then what they've done is they've actually just started packaging it

14
00:01:03,300 --> 00:01:05,320
in our API for us.

15
00:01:05,670 --> 00:01:13,830
So the main libraries that allows slogger to be integrated, well, one comes from this new get Puckett's.

16
00:01:13,830 --> 00:01:21,300
If I go to managing to get package, we'll see that we have the package already installed for swashbucklers.

17
00:01:21,330 --> 00:01:23,410
Not is the Internet's core.

18
00:01:23,930 --> 00:01:24,300
Right.

19
00:01:24,360 --> 00:01:27,620
Gives us the slogger tools then in our startup.

20
00:01:28,440 --> 00:01:32,310
So remember that program that CSS calls the startup.

21
00:01:32,310 --> 00:01:35,430
So startup is not where we define all the middleware.

22
00:01:35,790 --> 00:01:42,600
And the one that we have in the services for software is services that add sluggard Jen.

23
00:01:42,930 --> 00:01:48,600
We put in whether or not we either we if we were doing it manually, we would have to do this.

24
00:01:48,900 --> 00:01:53,750
But because it was generated once again, we don't have that step.

25
00:01:53,760 --> 00:01:56,100
So it will generate the Swiger document.

26
00:01:56,550 --> 00:01:58,350
It supports versioning.

27
00:01:58,350 --> 00:02:05,580
So if you have version one, version two, etc. off your API, you're able to keep track of the versions

28
00:02:05,580 --> 00:02:11,700
or at least let whoever is reading the documentation or which version of the API they're looking at,

29
00:02:12,030 --> 00:02:15,600
you can define certain open API information.

30
00:02:15,600 --> 00:02:17,910
That is the title, the version.

31
00:02:18,120 --> 00:02:24,030
If I click coming here, you'll see that you can add contact information, you can add a description,

32
00:02:24,300 --> 00:02:32,580
license, all sorts of things to your documents or somebody's looking at your API documentation, knows

33
00:02:32,580 --> 00:02:33,610
exactly who.

34
00:02:33,870 --> 00:02:42,180
If you want to provide that level of detail and what this API is about later on or further down, rather,

35
00:02:42,210 --> 00:02:50,280
in the configure section, we have the user swagga and app not use soggier UI.

36
00:02:50,280 --> 00:02:53,820
So Swiger UI means you will create its own endpoint.

37
00:02:53,820 --> 00:02:59,940
It will have its own kind of configuration file and it will call itself a listing if you want.

38
00:03:00,330 --> 00:03:00,570
No.

39
00:03:00,570 --> 00:03:00,900
Right.

40
00:03:00,900 --> 00:03:03,620
No, this is under the end.

41
00:03:03,750 --> 00:03:05,370
That is development.

42
00:03:05,370 --> 00:03:10,650
So Env is just a variable that allows us to track which environment we're in.

43
00:03:10,650 --> 00:03:14,970
Are we in development, are we in production right now?

44
00:03:15,150 --> 00:03:19,920
Anything that goes in here is it's basically seeing we're in development.

45
00:03:19,920 --> 00:03:27,090
So when we publish this to see as your I guess or, you know, to the Internet, whatever it is or wherever

46
00:03:27,090 --> 00:03:30,300
it is we put it, don't do any of this stuff.

47
00:03:30,390 --> 00:03:32,790
That's what this statement basically says.

48
00:03:33,240 --> 00:03:35,850
No, I think software is useful.

49
00:03:35,940 --> 00:03:42,660
So while they may have put it in the development parts, which I understand, I think that it's easier

50
00:03:42,660 --> 00:03:49,860
to just include it in the API at all times so that when I published my API, I don't have to provide

51
00:03:49,860 --> 00:03:55,110
as much technical support to somebody else to teach them how to use the API because that's what Soga

52
00:03:55,350 --> 00:03:56,670
documentation is for.

53
00:03:57,660 --> 00:04:04,230
So I'm going to just take these two lines out of that statement and place them in the general area where

54
00:04:04,230 --> 00:04:08,100
everything else is going to get done regardless of the environment.

55
00:04:08,490 --> 00:04:10,650
So that's my modification.

56
00:04:10,650 --> 00:04:13,230
Once again, context is everything.

57
00:04:13,230 --> 00:04:20,490
I can understand it for security reasons or just general lack of need for information exchange.

58
00:04:20,850 --> 00:04:27,780
They probably said, well, you only look at it in a development setting because the developers may

59
00:04:27,780 --> 00:04:28,440
be internal.

60
00:04:28,440 --> 00:04:35,070
But and if it's for third party developers, then I'm going to make it external and publicly accessible.

61
00:04:35,520 --> 00:04:42,360
So let's take a look at one of our controllers and the controller that we have.

62
00:04:42,690 --> 00:04:48,420
And you see here, it gives us the weather forecast and the defense I get.

63
00:04:49,540 --> 00:04:51,340
Method, all right.

64
00:04:51,580 --> 00:05:00,500
No, if I run the application and the webpage comes up, we're seeing our Swiger documents.

65
00:05:01,060 --> 00:05:01,530
All right.

66
00:05:01,720 --> 00:05:07,880
So hotel listing version one, all of those were things defined in the startup.

67
00:05:08,110 --> 00:05:14,320
So if you need to change the name or make it a bit more appealing, user friendly, human readable,

68
00:05:14,590 --> 00:05:21,420
you can always change it inside of the configuration areas here and here.

69
00:05:21,500 --> 00:05:23,340
Right there it is title.

70
00:05:24,040 --> 00:05:28,160
So if you want to add a description of description, you will come up on the page.

71
00:05:28,910 --> 00:05:38,280
Now, here it is showing us what is in the API and what's in the API would be our endpoint to get it

72
00:05:38,350 --> 00:05:40,840
going back to the controller to get.

73
00:05:41,910 --> 00:05:43,290
Weather forecast.

74
00:05:43,440 --> 00:05:50,370
All right, so it's contextually generating this document based on what it sees in the project, only

75
00:05:50,610 --> 00:05:58,680
that it will show you examples of what is going to come back when you try to retrieve anything, which

76
00:05:58,680 --> 00:06:07,290
is exactly right, because this is returning at least off with a forecast and weather forecast series

77
00:06:07,510 --> 00:06:10,530
is a class that has some data.

78
00:06:11,570 --> 00:06:17,610
Feels defined on each one as a date data types, so date time, intent, intense string.

79
00:06:17,930 --> 00:06:25,250
So you see if Swagga is actually taking all of them, see that it so you're going to get McAfee recorded

80
00:06:25,430 --> 00:06:30,110
temperature C temperature if something is going to show you all of them.

81
00:06:30,290 --> 00:06:33,430
And it is even giving you an idea of the data type.

82
00:06:33,470 --> 00:06:36,970
This is a date time int industry.

83
00:06:37,190 --> 00:06:44,780
So I'm just showing you how powerful Saugerties without any effort on our part to already have API documentation,

84
00:06:44,990 --> 00:06:52,400
which once again is very important when you are going to be building a client application, consuming

85
00:06:52,400 --> 00:06:59,330
an API, or if you are the one building the API, you make it easy for somebody who has to consume it.

86
00:06:59,330 --> 00:07:04,670
So the same way you'd want to be treated as a consumer of somebodies API to have all the information

87
00:07:04,670 --> 00:07:06,350
you need to know how to build around it.

88
00:07:06,560 --> 00:07:10,690
You want to make sure you provide that information to persons interacting with yours.

89
00:07:11,180 --> 00:07:14,360
So Swagga makes it out of the box very easy.

90
00:07:14,750 --> 00:07:20,420
And just to push the envelope a bit, when we go to try it out, we can actually execute.

91
00:07:20,630 --> 00:07:26,120
And Swagga allows us to actually test our API right here.

92
00:07:26,130 --> 00:07:32,150
So these this data that's coming back with the statistical two hundred really gets into all of that

93
00:07:32,150 --> 00:07:32,780
later on.

94
00:07:33,140 --> 00:07:40,010
But you see the response, buddy, that's because it's actually executed the code that is here.

95
00:07:40,010 --> 00:07:45,590
And just to prove that, if we click over in this page and we get this red dot, which is a break point,

96
00:07:45,920 --> 00:07:48,290
so I'm just going to click execute again.

97
00:07:49,620 --> 00:07:55,800
And then you see visual studio pauses and it hits this breakpoints is, you know, has this yellow in

98
00:07:55,800 --> 00:08:01,770
it and that allows us to press every level and go line by line.

99
00:08:02,590 --> 00:08:04,440
So I'm not trying to show you how to debug.

100
00:08:04,440 --> 00:08:08,100
No, I'm just showing you that this is not fluff.

101
00:08:08,100 --> 00:08:11,040
It actually will help us to test.

102
00:08:11,550 --> 00:08:16,610
So now we have to test the utilities, Swiger and Posman.

103
00:08:17,010 --> 00:08:17,410
All right.

104
00:08:17,820 --> 00:08:24,030
So when I press five or I can continue up top here, whichever one, then it will just continue with

105
00:08:24,030 --> 00:08:26,810
the execution and it will bring it back.

106
00:08:26,970 --> 00:08:27,460
All right.

107
00:08:27,750 --> 00:08:32,830
So that is how Swagga helps us in our quest for testing.

108
00:08:33,420 --> 00:08:37,110
No, I'm just going to do two for one special.

109
00:08:37,440 --> 00:08:40,960
And let's include over longer here.

110
00:08:41,700 --> 00:08:43,500
So on top of already.

111
00:08:43,860 --> 00:08:45,960
Well, by default it's injected.

112
00:08:45,960 --> 00:08:54,240
So because we are using Cerillo as a default logger, when we do logging, using our object here, it

113
00:08:54,240 --> 00:08:55,510
will use the silver logger.

114
00:08:55,540 --> 00:09:01,620
So I'm just going to show you a little snippet of logging so I can see a logger dot and then I would

115
00:09:01,620 --> 00:09:04,080
log information to see.

116
00:09:05,220 --> 00:09:10,480
Accessed weather forecast.

117
00:09:11,640 --> 00:09:18,660
All right, so this is just information to say access with the forecast and then I can see later on

118
00:09:19,020 --> 00:09:22,010
with a forecast returned, something like that.

119
00:09:22,020 --> 00:09:29,790
You know, it may not this this is elementary, but it's just once again, for example, seke.

120
00:09:30,240 --> 00:09:32,460
So just see lugger.

121
00:09:34,260 --> 00:09:37,590
Lowgar, oh, well, I'm sorry I put that too far down.

122
00:09:37,620 --> 00:09:39,810
Here's a return statement, so.

123
00:09:41,940 --> 00:09:47,190
Art, I'll just leave it has information for later on, we'll get to experiment more when we have our

124
00:09:47,190 --> 00:09:48,350
own code to test it.

125
00:09:48,360 --> 00:09:59,190
So I'm just going to run this application one sec and then I'm going to go ahead and try to click execute.

126
00:09:59,610 --> 00:10:01,770
I can remove the breakpoint by just clicking.

127
00:10:01,780 --> 00:10:04,410
So as long as that red dot is there, it's going to stop.

128
00:10:04,410 --> 00:10:09,120
When it gets to that line, you just remove the red dot and F for it to continue.

129
00:10:09,450 --> 00:10:09,870
All right.

130
00:10:09,870 --> 00:10:10,800
So it's executed.

131
00:10:10,810 --> 00:10:15,210
Let me see if my love is going to show me anything useful.

132
00:10:15,220 --> 00:10:16,130
Let me try and find.

133
00:10:16,380 --> 00:10:17,280
And there we go.

134
00:10:17,310 --> 00:10:24,030
So this is not a love files all the times that we've actually opened it up and it did something you

135
00:10:24,030 --> 00:10:25,580
see here, it's right in the log.

136
00:10:25,600 --> 00:10:33,060
So here is our first log application is starting and the need log that this did that, that.

137
00:10:33,270 --> 00:10:38,310
And here's the one that we just wrote, accessed weather forecasts.

138
00:10:38,310 --> 00:10:38,600
Right.

139
00:10:38,880 --> 00:10:43,830
And then it's telling you all of the details of what it's doing and getting on this and that.

140
00:10:43,830 --> 00:10:44,100
Right.

141
00:10:44,100 --> 00:10:46,050
So that's all logging works.

142
00:10:46,050 --> 00:10:47,730
That's all soggier works.
